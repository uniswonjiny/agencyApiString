<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="org.bizpay.mapper.AccountMapper">
  	<select id="accountInOutList" resultType="AccountInOut">
  		select
		    c.cmpnm,
		    d.induty_id,
		    d.mber_name,
		    d.company_name,
		    d.biz_num,
		    b.mber_code,
			b.inout_no,
			b.inout_code,
			b.req_amt,
			b.balance,
			TO_DATE(b.req_dt || b.req_time ,  'YYYYMMDDHH24MISS') as req_dt,
			b.charge,
			b.req_result,
			b.bank,
			b.account,
			b.depositor,
			b.bigo,
			b.biz_code,
			b.in_daily_sales_tot_amt,
			b.in_daily_sales_fee_per,
			b.in_daily_sales_fee_amt,
			b.in_daily_sales_dt,
			b.in_daily_sales_count,
			b.sales_tot_amt,
			b.sales_fee_per,
			b.sales_fee_amt,
			b.sales_dt,
			b.sales_time,
			b.sales_rcipt_no
		from
		    mber a,tbl_atm b,biz c,mber_basis d
		where
		    a.biz_code = c.biz_code
		    and a.biz_code in (select biz_code
		        from biz start with biz_code =#{memberBizeCode}
		        connect by nocycle prior biz_code = trget_biz_code)
		    and a.mber_code = b.mber_code
		    and a.mber_code = d.mber_code
		    and b.req_result = 'OK' -- 하드코딩
		    and b.req_dt between #{dateStart} and #{dateEnd}
		    <if test="bizCode!=null and !bizCode.equals('')"> 
				AND A.biz_code= #{bizCode}
			</if>
		    <if test='mberName!=null and !mberName.equals("")' >
	        	AND d.mber_name LIKE '%'||#{mberName}||'%'
	       	</if>	
		    <if test='indutyId!=null and !indutyId.equals("")' >
	        	AND d.induty_id LIKE '%'||#{indutyId}||'%'
	       	</if>
		    <if test='companyName!=null and !companyName.equals("")' >
	        	AND d.company_name LIKE '%'||#{companyName}||'%'
	       	</if>
	       	<if test='bizNum!=null and !bizNum.equals("")' >
	        	AND d.biz_num LIKE '%'||#{bizNum}||'%'
	       	</if>	
		    
		    --//입출금 구분 코드 (IN:입금, IN_DAILY:정기입금, IN_M:마이너스입금, OT:출금, OT_SF:관리비, OT_TF:통신비, OT_CANCEL : 결제취소건 출금, OT_UC : 본사출금)
	        <if test='inoutCode!=null and inoutCode.equals( "IN"  )' >
	        	AND b.inout_code LIKE '%'||#{inoutCode}||'%'
	       	</if>
	       	<if test='inoutCode!=null and inoutCode.equals( "IN_PAID"  )' >
	        	AND b.inout_code LIKE '%'||#{inoutCode}||'%'
	       	</if>
	       	<if test='inoutCode!=null and inoutCode.equals( "IN_PAID_M"  )' >
	        	AND b.inout_code LIKE '%'||#{inoutCode}||'%'
	       	</if>
	       	<if test='inoutCode!=null and inoutCode.equals( "IN_PAID_T"  )' >
	        	AND b.inout_code LIKE '%'||#{inoutCode}||'%'
	       	</if>
	       	<if test='inoutCode!=null and inoutCode.equals( "OT"  )' >
	        	AND b.inout_code = #{inoutCode}
	       	</if>
	       	<if test='inoutCode!=null  and inoutCode.equals( "OT_CANCEL"  )' >
	        	AND b.inout_code = #{inoutCode}
	       	</if>
	        <if test='inoutCode!=null and inoutCode.equals( "OT_SF"  )' >
	        	AND b.inout_code = #{inoutCode}
	       	</if>
			<if test='inoutCode!=null and inoutCode.equals( "OT_TF"  )' >
	        	AND b.inout_code = #{inoutCode}
	       	</if>
		    <if test='inoutCode!=null and inoutCode.equals( "OT_UC"  )' >
	        	AND b.inout_code = #{inoutCode}
	       	</if>
		order by b.req_dt desc,b.req_time desc,b.inout_no desc
  	</select>
  	
  	<select id="accountExcelList" resultType="AccountExcel">
  		select
		    a.van_pg_comp,
		    d.cmpnm,
		    GET_AGENCY(d.trget_biz_code, d.dealer_kind) as agent,
		    GET_DISTRIBUTOR(d.trget_biz_code, d.dealer_kind) as distributor,

		    TO_DATE(b.confm_dt || b.confm_time ,  'YYYYMMDDHH24MISS') as confm_dt,

		    e.mber_name,
		    e.company_name,
		    e.biz_num,
		    e.trmnl_no,
		    e.pg_trmnl_no,
		    e.pg_van,
		    (
		        select
		            confm_dt
		        from
		            delng
		        where
		            trget_mber_code = b.mber_code
		            and trget_mber_code_sn = b.mber_code_sn
		            and trget_rcipt_no = b.rcipt_no
		            and delng_se_code in ('CARD_CNCL')
		    ) as cncl_confm_dt,
		    (
		        select
		            confm_time
		        from
		            delng
		        where
		            trget_mber_code = b.mber_code
		            and trget_mber_code_sn = b.mber_code_sn
		            and trget_rcipt_no = b.rcipt_no
		            and delng_se_code in ('CARD_CNCL')
		    ) as cncl_confm_time,
		    b.confm_no,
		    c.usid,
		    (
		        select
		            mbtlnum
		        from
		            mber_basis
		        where
		            mber_code = c.mber_code
		    ) as mbtlnum,
		    (
		        select
		            adi_cn
		        from
		            delng_adi
		        where
		            mber_code = b.mber_code
		            and mber_code_sn = b.mber_code_sn
		            and rcipt_no = b.rcipt_no
		            and adi_code = 'PURCHSR_MBTLNUM'
		    ) as purchsr_mbtlnum,
		    a.issue_cmpny_nm,
		    b.delng_se_code,
		    case a.card_type when 'C' then 'Check 카드' else '카드 ' end as card_type,
		    a.instlmt_month,
		    a.card_no,
		    nvl(b.splpc,0) + nvl(b.vat,0) as tot,
		    case e.pay_type
		        when 'N' then '일반'
		        else (
		                case e.pay_type
		                    when 'B' then '바로정산'
		                    else '익일입금'
		                end
		            )
		    end as pay_type,
		    case a.van_pg_comp
		        when 'DANAL' then get_pg_fee((b.splpc + b.vat), 'DANAL', e.pay_type)
		        else get_pg_fee((b.splpc + b.vat), 'KSNET', e.pay_type)
		    end as card_fee,
		    round((
		        (b.splpc + b.vat) * (
		            100 - (
		                select
		                    fee_rate
		                from
		                    mber_basis
		                where
		                    mber_code = c.mber_code
		            )
		        )
		    ) / 100) seler_pymntamt,
		    
		   b.splpc 
								-trunc(decode(a.card_type,'N',(b.splpc*1.5)/100,'C',b.splpc/100,(b.splpc*1.5)/100)) 
								-trunc((b.splpc*(100-(SELECT fee_rate FROM mber_basis WHERE mber_code = c.mber_code)))/100) fee_ern,
		      
		    trunc((
		        b.splpc * (
		            select
		                pymnt_rate
		            from
		                biz
		            where
		                biz_code = d.biz_code
		        )
		    ) / 100) dealer_pymntamt,
		    trunc((
		        (
		            (
		                (
		                    b.splpc * (
		                        select
		                            fee_rate
		                        from
		                            mber_basis
		                        where
		                            mber_code = c.mber_code
		                    )
		                ) / 100
		            ) - (decode(a.card_type, 'N', (b.splpc * 1.5) / 100, 'C', b.splpc / 100, (b.splpc * 1.5) / 100))
		        ) - (
		            (
		                b.splpc * (
		                    select
		                        pymnt_rate
		                    from
		                        biz
		                    where
		                        biz_code = d.biz_code
		                )
		            ) / 100
		        )
		    ) * 0.25) as linkapp,
		    trunc((
		        (
		            b.splpc * (
		                select
		                    fee_rate
		                from
		                    mber_basis
		                where
		                    mber_code = c.mber_code
		            )
		        ) / 100
		    ) - (decode(a.card_type, 'N', (b.splpc * 1.5) / 100, 'C', b.splpc / 100, (b.splpc * 1.5) / 100))) - trunc((
		        b.splpc * (
		            select
		                pymnt_rate
		            from
		                biz
		            where
		                biz_code = d.biz_code
		        )
		    ) / 100) - trunc((
		        (
		            (
		                (
		                    b.splpc * (
		                        select
		                            fee_rate
		                        from
		                            mber_basis
		                        where
		                            mber_code = c.mber_code
		                    )
		                ) / 100
		            ) - (decode(a.card_type, 'N', (b.splpc * 1.5) / 100, 'C', b.splpc / 100, (b.splpc * 1.5) / 100)) - (
		                (
		                    b.splpc * (
		                        select
		                            pymnt_rate
		                        from
		                            biz
		                        where
		                            biz_code = d.biz_code
		                    )
		                ) / 100
		            )
		        ) * 20
		    ) / 100) unicore,
		    trunc((
		        B.Splpc * (
		            select
		                Fee_Distributor
		            from
		                Mber_Basis
		            where
		                Mber_Code = C.Mber_Code
		        )
		    ) / 100) as Fee_Distributor,
		    trunc((
		        B.Splpc * (
		            select
		                Fee_Agency
		            from
		                Mber_Basis
		            where
		                Mber_Code = C.Mber_Code
		        )
		    ) / 100) as Fee_Agency,
		    trunc((
		        b.splpc * (
		            select
		                fee_dealer
		            from
		                mber_basis
		            where
		                mber_code = c.mber_code
		        )
		    ) / 100) as fee_dealer
		from
		    delng_credt a,
		    delng b,
		    mber c,
		    biz d,
		    mber_basis e
		where
		    a.mber_code(+) = b.mber_code
		    and a.mber_code_sn(+) = b.mber_code_sn
		    and a.rcipt_no(+) = b.rcipt_no
		    and b.mber_code = c.mber_code
		    and c.biz_code = d.biz_code
		    and c.mber_code = e.mber_code
		    and b.card_delete_yn != 'Y'
		    and e.biz_code in (
		        select
		            biz_code
		        from
		            biz
		        start with
		            biz_code = #{memberBizeCode}
		        connect by nocycle
		            prior biz_code = trget_biz_code
		    )
		    and b.delng_se_code in ('CARD_ISSUE') 
		    and b.confm_dt between #{dateStart} and #{dateEnd}
		    and b.delng_se_code = 'CARD_ISSUE'
		    <if test='bizCode!=null and !bizCode.equals("")' >
	        	AND c.biz_code = #{bizCode}
	       	</if>	
		    <if test='bizrno!=null and !bizrno.equals("")' >
	        	AND e.biz_num LIKE '%'||#{bizrno}||'%'
	       	</if>	
		    <if test='mberName!=null and !mberName.equals("")' >
	        	AND d.mber_name LIKE '%'||#{mberName}||'%'
	       	</if>	
		    <if test='indutyId!=null and !indutyId.equals("")' >
	        	AND e.induty_id LIKE '%'||#{indutyId}||'%'
	       	</if>	
		    <if test='companyName!=null and !companyName.equals("")' >
	        	AND e.company_name LIKE '%'||#{companyName}||'%'
	       	</if>	
		    
		    
		order by b.confm_dt desc, b.confm_time desc
		  	
  	</select>
  	
  	<select id="transferList" resultType="AccountTrans">		
			SELECT
					a.mber_code, 
					a.mber_code_sn, 
					a.rcipt_no, 
					SUBSTR(a.confm_dt,1,4)||'-'||SUBSTR(a.confm_dt,5,2)||'-'||SUBSTR(a.confm_dt,7,2) AS confm_dt, 
					a.pymnt_yn, 
					round(((a.splpc + a.vat)*(100-(SELECT fee_rate FROM mber_basis WHERE mber_code = c.mber_code)))/100) AS splpc, 
					b.bank_name, 
					b.account_no, 
					b.depositor , 
					case b.pay_type when 'N' then '일반' else ( case b.pay_type  when 'B' then '바로정산' else '익일입금' end ) end as pay_type 
			FROM DELNG a, MBER_BASIS b, MBER c 
			WHERE a.mber_code = b.mber_code 
				AND a.mber_code = c.mber_code 
				AND a.card_delete_yn != 'Y' 
				AND b.pay_type IN('N', 'T')  -- 바로정산 제외... 결과적으로 위에 필요없는 코드가 있음.
				AND a.delng_se_code = 'CARD_ISSUE' -- 화면상 선택하는 부분이 없는데 널인경우 카드를 삽입함
				AND a.confm_dt BETWEEN #{dateStart} and #{dateEnd} 
				AND b.calculate_type='U'
			   	AND b.biz_code in (SELECT biz_code FROM biz START WITH biz_code = #{memberBizeCode} CONNECT BY NOCYCLE PRIOR biz_code = trget_biz_code)
				<if test='bizCode!=null and !bizCode.equals("")' >
					AND b.biz_code= #{bizCode}
				</if>
				<if test='pymntYn!=null and !pymntYn.equals("")' >
					AND a.pymnt_yn=#{pymntYn}
				</if>
				<if test='mberName!=null and !mberName.equals("")' >
					AND b.mber_name LIKE '%'||#{mberName}||'%'
				</if>
				 <if test='indutyId!=null and !indutyId.equals("")' >
		        	AND b.induty_id LIKE '%'||#{indutyId}||'%'
		       	</if>	
		       	<if test='bizrno!=null and !bizrno.equals("")' >
		        	AND b.biz_num LIKE '%'||#{bizrno}||'%'
		       	</if>
		       	<if test='confmNo!=null and !confmNo.equals("")' >
		        	AND a.CONFM_NO LIKE '%'||#{confmNo}||'%'
		       	</if>	
		       	<if test='payType!=null and !payType.equals("")' >
		        	AND b.pay_type = #{payType}
		       	</if>
				ORDER BY confm_dt DESC
  	</select>
  	
  	<select id="bankAcntTrans" resultType="BankAcntTrans">
	SELECT 
		to_char(to_Date(f.confm_dt), 'yyyy-mm-dd') As confm_dt_sub,
		to_char(to_Date(f.pay_dt), 'yyyy-mm-dd') As fpay_dt,  
		case epay_type when 'T' then '익일입금' else '일반' end as pay_type, 
		case fee_bank when 'P' then '500' else '0' end as bank_fee, 
		case fee_bank when 'P' then seler_pymntamt - 500 else seler_pymntamt end as pay_amount, 
		f.bank_name , 
		f.account_no,
		f.depositor,
		f.cnt,
		f.pymnt_yn
	FROM (
		SELECT b.pymnt_yn, 
			Min(B.Confm_Dt) As Confm_Dt,
			Min(b.pay_dt) As pay_dt,
			e.bank_name, 
			e.account_no, 
			e.depositor, 
			e.pay_type as epay_type, 
			e.fee_bank, 		
			NVL(round(SUM(b.splpc+b.vat)-SUM(((b.splpc+b.vat)*(SELECT fee_rate FROM mber_basis WHERE mber_code = A.mber_code))/100)), 0) AS seler_pymntamt, 
			COUNT(b.confm_dt) AS cnt 
		FROM delng_credt a, (Select de.*, To_Char(To_Date(Next_Businessday_Func(To_Char(To_Date(de.Confm_Dt), 'yyyymmdd'), (select pay_type from mber_basis mb where mb.mber_code = de.mber_code))), 'yyyymmdd') as pay_dt from delng de) b, mber c, biz d, mber_basis e 
		WHERE a.mber_code(+) = b.mber_code 
			AND a.mber_code_sn(+) = b.mber_code_sn 
			AND a.rcipt_no(+) = b.rcipt_no 
			AND b.mber_code = c.mber_code 
			AND c.biz_code = d.biz_code 
			AND c.mber_code = e.mber_code 
			AND b.card_delete_yn != 'Y' 
        	AND c.biz_code in (SELECT biz_code FROM biz START WITH biz_code = #{memberBizeCode} CONNECT BY NOCYCLE PRIOR biz_code = trget_biz_code) 
			AND e.pay_type IN ('N','T') 
			AND e.calculate_type='U'
			AND b.delng_se_code='CARD_ISSUE' 
				AND b.pymnt_yn='N' 
			<choose>
				<when test='dateType.equals("confirm")'>
					AND b.confm_dt BETWEEN #{dateStart} and #{dateEnd} 
				</when>
				<otherwise>
					AND b.pay_dt BETWEEN #{dateStart} and #{dateEnd} 
				</otherwise>
			</choose>
			<if test='bizCode!=null and !bizCode.equals("")' >
				AND c.biz_code= #{bizCode}
			</if>
			<if test='pymntYn!=null and !pymntYn.equals("")' >
				AND b.pymnt_yn=#{pymntYn}
			</if>
			<if test='mberName!=null and !mberName.equals("")' >
				AND e.mber_name LIKE '%'||#{mberName}||'%'
			</if>
			 <if test='indutyId!=null and !indutyId.equals("")' >
	        	AND e.induty_id LIKE '%'||#{indutyId}||'%'
	       	</if>	
	       	<if test='bizrno!=null and !bizrno.equals("")' >
	        	AND e.biz_num LIKE '%'||#{bizrno}||'%'
	       	</if>
			GROUP BY b.pymnt_yn, c.usid, e.bank_name, e.account_no, e.mber_name, e.depositor, e.pay_type, e.fee_bank
			) f
			Order By f.Confm_Dt Desc, f.depositor asc
  	</select>
  	
  	<!-- 출금정지설정 -->
  	<update id="inOutSetting" parameterType="HashMap">
  		UPDATE tbl_config 
  			SET 
  		enable_yn = #{enableYn} 
  		, msg = #{msg} 
  		WHERE gb_code = '000' 
  	</update>
  	
  	<!-- 출금정지상태확인  -->
  	<select id="inOutSettingInfo" resultType="HashMap" >
  		select
  			enable_yn as enableYn,
  			msg
  		from
  		tbl_config
  		WHERE gb_code = '000'
  	</select>
  	
  	<!-- 계좌이체조정 지급 / 미지급처리 -->
  	<update id="acnutTransfrYn" parameterType="java.util.List">
  	<foreach  item="autVo" collection="list"  index="index" 
      separator=";" open="DECLARE BEGIN" close="; END;" >
		  	UPDATE delng
			SET
			   pymnt_yn = #{autVo.pymntYn}
			WHERE
			        mber_code = #{autVo.mberCode}
			    AND mber_code_sn = #{autVo.mberCodeSn}
			    AND rcipt_no = #{autVo.rciptNo}
	    
	    </foreach>
  	</update>
  	
  	<!-- 게좌 제한 금액 사항 확인  -->
  	<select id="limitInfo" resultType="LimitInfo">
  	SELECT
		DISTINCT aa.LIMIT_ONE,
		aa.LIMIT_DAY ,
		aa.LIMIT_MONTH ,
		aa.LIMIT_YEAR ,
		aa.INSTALLMENT_MONTHS as installment ,
		c.sum_day,
		a.sum_month ,
		b.sum_year
	FROM
		MBER_BASIS aa ,
		(
		SELECT
			sum( nvl(SPLPC , 0)) + sum( nvl(vat , 0)) AS sum_month
		FROM
			DELNG
		WHERE
			MBER_CODE = #{val}
			AND CONFM_DT BETWEEN to_char(add_months(sysdate,-1) , 'YYYYMMDD') AND to_char(sysdate , 'YYYYMMDD') ) a,
		(
		SELECT
			sum( nvl(SPLPC , 0)) + sum( nvl(vat , 0)) AS sum_year
		FROM
			DELNG
		WHERE
			MBER_CODE = #{val}
			AND CONFM_DT BETWEEN to_char( trunc(sysdate, 'y') , 'YYYYMMDD' ) AND to_char(sysdate , 'YYYYMMDD')) b ,
			
		(
		SELECT
			sum( nvl(SPLPC , 0)) + sum( nvl(vat , 0)) AS sum_day
		FROM
			DELNG
		WHERE
			MBER_CODE = #{val}
			AND CONFM_DT = to_char(sysdate , 'YYYYMMDD') )c
	WHERE
		aa.MBER_CODE = #{val}
  	</select>
  	
  	<!-- 동일 카드 결제 확인용  -->
  	<select id="sameCardList" resultType="String" parameterType="SameCardList">
  		SELECT 
			b.CARD_NO 
		FROM delng a, DELNG_CREDT b 
		WHERE a.mber_code = b.MBER_CODE 
		AND a.mber_code= #{mberCode} 
		AND a.rcipt_no = b.rcipt_no 
		AND a.rcipt_no like #{dateStr}||'%'  
		AND (a.SPLPC + a.vat) =  #{price}
		ORDER BY  a.rcipt_no desc
  	</select>
  	
  	  	<!-- 영수증처리 
  	!!!!!주의!!!!!
  		프로시저 실행 리턴값을 받기위해서 공식문서에는 프로시저 실행에 관련된부분이 사실상 없고
  		구글 네이버 검색되는 내용또한 모두 틀린내용이다. 
  		select 가 아닌 insert update 로 실행해야 하고 out 부분을 정확하게 아래 처럼 기술해야 하고 
  		input 파라미터에 값이 자동으로 주입된다.
  	 -->
  	<insert id="propRciptNO" parameterType="hashmap" statementType="CALLABLE">
  			{call PROC_RCIPT_CAL(
  				#{mber_code},
  				#{rcipt_no , mode=OUT,jdbcType=VARCHAR, javaType=string}
  			)}
  	</insert>
  	
  </mapper>
